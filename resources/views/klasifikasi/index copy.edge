@layout('template')

@section('content')
<style>
  .lstm_div .dataTables_length{
    display: none;
  }
  .lstm_div .dataTables_filter{
    display: none;
  }
  .lstm_div .dataTables_info{
    display: none;
  }
</style>
<div class="box-content">
  <div class="text-center btn-start">
    <div class="alert alert-warning" role="alert">
      Klik <b onclick="startProcess()" style="cursor: pointer;"><i class="icofont-play-alt-2 icofont-1x"></i> Mulai</b> untuk pembuatan model dengan metode <i>Long short-term memory, Recurrent Neural Network</i>.
    </div>
    <button class="btn-01" onclick="startProcess()"><i class="icofont-play-alt-2 icofont-1x"></i> Mulai </button>
  </div>
  <div class="breadcrumbs msg-tooltip" data-toggle="tooltip" data-placement="left" title="Klik, untuk melihat hasil dari setiap tahap.">
    <a class="breadcrumb__step step-1 t-dataset_div" href="javascript:void(0)" onclick="showProcess('dataset_div')">Dataset</a>
    <a class="breadcrumb__step step-2 t-preprocessing_div" href="javascript:void(0)" onclick="showProcess('preprocessing_div')">Preprocessing</a>
    <a class="breadcrumb__step step-3 t-wordsequence_div" href="javascript:void(0)" onclick="showProcess('wordsequence_div')">Sequence of Integer</a>
    <a class="breadcrumb__step step-4 t-splitdataset_div" href="javascript:void(0)" onclick="showProcess('splitdataset_div')">Split dataset</a>
    <a class="breadcrumb__step step-5 t-lstm_div" href="javascript:void(0)" onclick="showProcess('lstm_div')">LSTM</a>
    <a class="breadcrumb__step step-6 t-testing_div" href="javascript:void(0)" onclick="showProcess('testing_div')">Pengujian</a>
    <a class="breadcrumb__step step-7 t-summary_div" href="javascript:void(0)" onclick="showProcess('summary_div')">Ringkasan</a>
    <a class="breadcrumb__step breadcrumb__step--active loading-process t-current" href="javascript:void(0)" onclick="showProcess('current')"><div class="spinner-border spinner-border-sm" role="status"><span class="sr-only">Loading...</span></div> <span class="process_name">Proses</span>...</a>
  </div>
</div>

<div class="box-content col-md-12" style="margin-top:30px;">
  <div class="div-process dataset_div">
    <table style="font-size:14px;" class="table table-striped table-bordered dataset_table" style="width:100%">
      <thead>
          <tr>
              <th>Teks</th>
          </tr>
      </thead>
    </table>
  </div>

  <div class="div-process preprocessing_div">
    <nav>
        <div class="nav nav-tabs nav-fill" role="tablist">
            <a class="nav-item nav-link " data-toggle="tab" href=".tab-casefolding" role="tab" aria-selected="false">1. <i>Case Folding</i></a>
            <a class="nav-item nav-link" data-toggle="tab" href=".tab-tokenizing" role="tab" aria-selected="false">2. <i>Tokenizing</i></a>
            <a class="nav-item nav-link" data-toggle="tab" href=".tab-filtering" role="tab" aria-selected="false">3. <i>Filtering</i></a>
            <a class="nav-item nav-link" data-toggle="tab" href=".tab-stemming" role="tab" aria-selected="false">4. <i>Stemming</i></a>
        </div>
    </nav>
    <div class="tab-content">
        <div class="tab-pane fade tab-casefolding" role="tabpanel">
            <div class="card border-light">
                <div class="card-body">
                  <div class="alert alert-warning" role="alert">
                    <i class="icofont-info-circle"></i> <i>Case folding</i> 
                    merupakan proses menyamakan <i>case</i> karakter pada teks.
                  </div>
                  <table style="font-size:14px;" class="table table-striped table-bordered casefolding_table" style="width:100%">
                    <thead>
                        <tr>
                            <th>Teks</th>
                        </tr>
                    </thead>
                </table>
                </div>
            </div>
        </div>
        <div class="tab-pane fade tab-tokenizing" role="tabpanel">
            <div class="card border-light">
                <div class="card-body">
                  <div class="alert alert-warning" role="alert">
                    <i class="icofont-info-circle"></i> <i>Tokenizing</i> 
                    merupakan proses pemisahan dan pemotongan kalimat menjadi setiap kata.
                  </div>
                  <table style="font-size:14px;" class="table table-striped table-bordered tokenizing_table" style="width:100%">
                    <thead>
                        <tr>
                            <th>Teks</th>
                        </tr>
                    </thead>
                </table>
                </div>
            </div>
        </div>
        <div class="tab-pane fade tab-filtering" role="tabpanel">
          <div class="card border-light">
              <div class="card-body">
                <div class="alert alert-warning" role="alert">
                  <i class="icofont-info-circle"></i> <i>Filtering</i> 
                  merupakan proses membuang atau menghapus kata-kata serta tanda-tanda yang tidak bermakna secara signifikan.
                </div>
                <table style="font-size:14px;" class="table table-striped table-bordered filtering_table" style="width:100%">
                  <thead>
                      <tr>
                          <th>Teks</th>
                      </tr>
                  </thead>
              </table>
              </div>
          </div>
        </div>       
        <div class="tab-pane fade tab-stemming" role="tabpanel">
          <div class="card border-light">
              <div class="card-body">
                <div class="alert alert-warning" role="alert">
                  <i class="icofont-info-circle"></i> <i>Stemming</i> 
                  merupakan proses pemetaan dan penguraian bentuk dari suatu kata menjadi kata dasar.
                </div>
                <table style="font-size:14px;" class="table table-striped table-bordered stemming_table" style="width:100%">
                  <thead>
                      <tr>
                          <th>Teks</th>
                      </tr>
                  </thead>
              </table>
              </div>
          </div>
        </div>
    </div>
  </div>
  
  <div class="div-process splitdataset_div">
    <div class="alert alert-warning" role="alert">
      <i class="icofont-info-circle"></i> <i>Split dataset</i> 
      merupakan pembagian <i>dataset</i> secara acak menjadi data latih dan data uji.
    </div>
    <table style="font-size:14px;" class="table table-striped table-bordered splitdataset_table" style="width:100%">
      <thead>
          <tr>
              <th>Teks</th>
              <th style="width: 20px;">Label</th>
          </tr>
      </thead>
    </table>
    <div id="accordion" class="kfold_splitdataset_div">
    </div>
  </div>

  <div class="div-process wordsequence_div">
    <nav>
      <div class="nav nav-tabs nav-fill" role="tablist">
          <a class="nav-item nav-link " data-toggle="tab" href=".tab-wordinteger" role="tab" aria-selected="false">Kata</a>
          <a class="nav-item nav-link" data-toggle="tab" href=".tab-kelasinteger" role="tab" aria-selected="false">Kelas</a>
          <a class="nav-item nav-link" data-toggle="tab" href=".tab-datasetsequence" role="tab" aria-selected="false"><i>Dataset</i></a>
      </div>
    </nav>
    <div class="tab-content">
        <div class="tab-pane fade tab-wordinteger" role="tabpanel">
            <div class="card border-light">
              <div class="card-body">
                <div class="alert alert-warning" role="alert">
                  <i class="icofont-info-circle"></i>
                  Pengubahan kata ke bentuk angka berdasarkan tingkat kemunculan kata pada dataset.
                </div>
                <table style="font-size:14px;" class="table table-striped table-bordered wordinteger_table" style="width:100%">
                  <thead>
                    <tr>
                      <th>No</th>
                      <th>Kata</th>
                      <th>Frekuensi</th>
                    </tr>
                  </thead>
                </table>
              </div>
            </div>
        </div>
        <div class="tab-pane fade tab-kelasinteger" role="tabpanel">
            <div class="card border-light">
              <div class="card-body">
                <div class="alert alert-warning" role="alert">
                  <i class="icofont-info-circle"></i>
                  Pengubahan kelas ke bentuk angka berdasarkan jumlah pada dataset.
                </div>
                <table style="font-size:14px;" class="table table-striped table-bordered kelasinteger_table" style="width:100%">
                  <thead>
                    <tr>
                      <th>No</th>
                      <th>Kelas</th>
                      <th>Frekuensi</th>
                    </tr>
                  </thead>
                </table>
              </div>
            </div>
        </div>
        <div class="tab-pane fade tab-datasetsequence" role="tabpanel">
          <div class="card border-light">
              <div class="card-body">
                <div class="alert alert-warning" role="alert">
                  <i class="icofont-info-circle"></i>
                  Pengubahan <i>dataset</i> menjadi sebuah bentuk angka yang dapat mewakili setiap kata.
                </div>
                <table style="font-size:14px;" class="table table-striped table-bordered datasetsequence_table" style="width:100%">
                  <thead>
                      <tr>
                          <th>Teks</th>
                      </tr>
                  </thead>
              </table>
              </div>
          </div>
        </div>
    </div>
  </div>

  <div class="div-process lstm_div">
    <table style="width:100%">
      <tr>
        <td style="width:30%" align="center" valign="top">
          <table style="font-size:14px;" class="table table-striped table-bordered train_table">
            <thead>
              <tr>
                <th>Epoch</th>
                <th>Acc</th>
                <th>Val Acc</th>
                <th>Loss</th>
                <th>Val Loss</th>
              </tr>
            </thead>
          </table>
        </td>
        <td style="width:70%" align="center" valign="top"><div id="acc_chart_div"></div></td>
      </tr>
    </table>
  </div>
  <div class="div-process testing_div">
    <nav>
      <div class="nav nav-tabs" role="tablist">
          <a class="nav-item nav-link active " data-toggle="tab" href=".tab-testing-table" role="tab" aria-selected="false">Data Pengujian</a>
          <a class="nav-item nav-link" data-toggle="tab" href=".tab-confusion-matrix" role="tab" aria-selected="false"><i>f-Measure</i></a>
      </div>
    </nav>
    <div class="tab-content">
      <div class="tab-pane fade active show tab-testing-table" role="tabpanel">
          <div class="card border-light">
              <div class="card-body">
                <div class="alert alert-warning" role="alert">
                  <i class="icofont-info-circle"></i>
                  Ringkasan Model yang digunakan dalam proses klasifikasi pada sistem
                </div>
                  <table style="font-size:14px;" class="table table-striped table-bordered testing_table">
                    <thead>
                      <tr>
                        <th></th>
                        <th>Isi Laporan</th>
                        <th>Prediksi</th>
                        <th>Target</th>
                      </tr>
                    </thead>
                  </table>
              </div>
          </div>
      </div>
      <div class="tab-pane fade tab-confusion-matrix" role="tabpanel">
        <div class="card border-light">
            <div class="card-body">
              <div id="dataView"></div>
              <div style="display:inline-block; float:left" id="conMatrix"></div>
              <div style="display:inline-block; float:left" id="legend"></div>
            </div>
        </div>
      </div>
  </div>
</div>

<script>
  google.charts.load('current', {packages: ['corechart', 'line']});
  var stemmer = new Stemmer();
  var preprocessing = new Preprocessing();
  var klasifikasi = new Klasifikasi();

  let delay = 0;
  let N_kflod = 10; // ==> jumlah k fold cross-validation
  var maks_kamus = 5000;
  var token_integer = [0];
  var process, dataset, dataset_origin, kelas_sequence, stopwords = [],
    slangwords, rootwords = [], kamus = [], data_testing, data_testing;
  

  var dataset_table = $('.dataset_table').DataTable({"ordering": false})
  var casefolding_table = $('.casefolding_table').DataTable({"ordering": false})
  var tokenizing_table = $('.tokenizing_table').DataTable({"ordering": false})
  var stemming_table = $('.stemming_table').DataTable({"ordering": false})
  var filtering_table = $('.filtering_table').DataTable({"ordering": false})
  var wordinteger_table = $('.wordinteger_table').DataTable({"ordering": false})
  var kelasinteger_table = $('.kelasinteger_table').DataTable({"ordering": false})
  var datasetsequence_table = $('.datasetsequence_table').DataTable({"ordering": false})
  var splitdataset_table = $('.splitdataset_table').DataTable({"ordering": false})
  var train_table = $('.train_table').DataTable({"lengthMenu": [5, 10]})
  var testing_table = $('.testing_table').DataTable({"ordering": false})
  $('.breadcrumbs').hide()
  $('.div-process').hide()
  $('.breadcrumb__step').hide()
  getDictionary()

  function getDictionary() {
    $.ajax({
      url: "kamus",
      method: "post",
      cache: false,
      success: function (resp) {
        var resp_stopwords = resp['stopwords']
        resp_stopwords.forEach(key => {
          stopwords.push(key.kata)
        });
        var resp_rootwords = resp['rootwords']
        resp_rootwords.forEach(key => {
          rootwords.push(key.kata)
        });
        slangwords = resp['slangwords']
      }
    })
  }

  function showProcess(div) {
    $('.div-process').hide()
    $('.breadcrumb__step').removeClass('breadcrumb__step--active');
    $('.t-'+div).addClass('breadcrumb__step--active');
    if (div == "current") {
      $('.' + process).show()
    } else {
      $('.' + div).show()
    }
  }

  function startProcess() {
    $('.btn-start').hide()
    $('.breadcrumbs').show()
    getDataset()
  }

  function messageProcess(message) {
    $('.loading-process').show()
    $(".process_name").html(message)
  }

  function showTab(tab){
    $('a[href="' + tab + '"]').click();
  }

  function getDataset() {
    process = "dataset_div"
    messageProcess("Memuat dataset")
    $('.dataset_div').show()
    setTimeout(function () {
      $.ajax({
        url: "allDataset",
        method: "GET",
        cache: false,
        success: function (resp) {
          dataset = resp['data']
          dataset_origin = dataset
          let count_dataset = dataset.length
          if(count_dataset>0){
            dataset.forEach(key => {
              setTimeout(function () {
                count_dataset--
                var content = "Kelas : <b>" + key.kelas + "</b><br>" + key.teks
                dataset_table.row.add([content]).draw();
                if (count_dataset == 0) {
                  $('.step-1').show()
                  $('.dataset_div').hide()
                  caseFolding_process()
                }
              }, delay)
            });
          }else{
            message("warning","Dataset kosong, silahkan menambahkan dataset terlebih dahulu")
            setTimeout(
              "sammyApp.refresh()"
              ,2000);
          }
        }
      })
    }, delay)
  }

  function caseFolding_process() {
    process = "preprocessing_div"
    $('.preprocessing_div').show()
    messageProcess("Case folding")
    showTab(".tab-casefolding")
    setTimeout(function () {
      var new_dataset = []
      let count_dataset = dataset.length
      dataset.forEach(key => {
        setTimeout(function () {
          count_dataset--
          var teks = preprocessing.caseFolding(key.teks)
          var kelas = preprocessing.caseFolding(key.kelas)
          var content = "Kelas : <b>" + kelas + "</b><br>" + teks
          casefolding_table.row.add([content]).draw();
          new_dataset.push({
            teks: teks,
            kelas: kelas
          })

          if (count_dataset == 0) {
            dataset = new_dataset
            tokenizing_process()
          }
        }, delay)
      });

    }, delay)
  }

  function tokenizing_process() {
    process = "preprocessing_div"
    $('.preprocessing_div').show()
    messageProcess("Tokenizing")
    showTab(".tab-tokenizing")
    setTimeout(function () {
      var new_dataset = []
      let count_dataset = dataset.length
      dataset.forEach(key => {
        setTimeout(function () {
          count_dataset--
          var teks = preprocessing.tokenizing(key.teks)
          var kelas = key.kelas
          var text_view = teks.map(function(key){ return " '"+key+"'"; });
          var content = "Kelas : <b>" + kelas + "</b><br>" + text_view;
          tokenizing_table.row.add([content]).draw();
          new_dataset.push({
            teks: teks,
            kelas: kelas
          })

          if (count_dataset == 0) {
            dataset = new_dataset
            filtering_process()
          }
        }, delay)
      });

    }, delay)
  }

  function filtering_process() {
    process = "preprocessing_div"
    $('.preprocessing_div').show()
    messageProcess("Filtering")
    showTab(".tab-filtering")
    setTimeout(function () {
      var slangword = []
      var kata_ganti = []
      slangwords.forEach(key => {
        slangword.push(key.kata)
        kata_ganti.push(key.kata_ganti)
      });

      var new_dataset = []
      let count_dataset = dataset.length
      dataset.forEach(key => {
        setTimeout(function () {
          count_dataset--
          var teks = preprocessing.filteringWord(slangword,kata_ganti, stopwords, key.teks)
          var kelas = key.kelas
          var text_view = teks.map(function(key){ return " '"+key+"'"; });
          var content = "Kelas : <b>" + kelas + "</b><br>" + text_view
          filtering_table.row.add([content]).draw();
          new_dataset.push({
            teks: teks,
            kelas: kelas
          })
          if (count_dataset == 0) {
            dataset = new_dataset
            stemming_process()
          }
        }, delay)
      });
    }, delay)
  }

  function stemming_process() {
    process = "preprocessing_div"
    $('.preprocessing_div').show()
    messageProcess("Stemming")
    showTab(".tab-stemming")
    setTimeout(function () {
      var new_dataset = []
      let count_dataset = dataset.length
      dataset.forEach(key => {
        setTimeout(function () {
          count_dataset--
          var teks = preprocessing.stemming(rootwords, key.teks)
          var kelas = key.kelas
          var text_view = teks.map(function(key){ return " '"+key+"'"; });
          var content = "Kelas : <b>" + kelas + "</b><br>" + text_view;
          stemming_table.row.add([content]).draw();
          new_dataset.push({
            teks: teks,
            kelas: kelas
          })
          if (count_dataset == 0) {
            dataset = new_dataset
            $('.step-2').show()
            $('.preprocessing_div').hide()
            wordSequence_process()
          }
        }, delay)
      })

    }, delay)
  }

  
  function wordSequence_process() {
    process = "wordsequence_div"
    $('.wordsequence_div').show()
    messageProcess("Word sequence of integer")
    showTab('.tab-wordinteger');
    klasifikasi.preDatasetSequence(dataset)
  }

  function generateSequenceTable(array_word,tokens,word_freq){
    array_words = array_word
    word_sequence = tokens
    let i = 0
    tokens.forEach(element => {
      setTimeout(()=>{
        wordinteger_table.row.add([(i+1), tokens[i], word_freq[i]]).draw();
        i++
        if(i==tokens.length){
          showTab('.tab-kelasinteger');
          klasifikasi.kelasGroup();
        }
      },delay)
    });
  }
  
  function generateSequenceKelasTable(array_kelas,kelas,kelas_freq){
    kelas_sequence = kelas
    kelas_frequency = kelas_freq
    let i = 0
    kelas.forEach(element => {
      setTimeout(()=>{
        kelasinteger_table.row.add([(i+1), kelas[i], kelas_freq[i]]).draw();
        i++
        if(i==kelas.length){
          generateDatasetSequenceTable()
        }
      },delay+500)
    });
  }

  function generateDatasetSequenceTable(){
    const new_dataset = []
    showTab('.tab-datasetsequence')
    length = dataset.length
    dataset.forEach(key => {
      setTimeout(function(){
          length--
          const element_text = key.teks
          var element_kelas = key.kelas
          let kelas_integer = kelas_sequence.indexOf(element_kelas)+1
          
          var text_i = []
          for (let x=0; x<element_text.length; x++) {
            let word_integer = word_sequence.indexOf(element_text[x])+1
            if(word_integer!=0){
              text_i.push(word_integer)
            }
          }
          if(text_i.length>0){
            var kurang = dataset_max_length - text_i.length
            var text_0 = []
            for (let x=0; x<kurang; x++) {
                text_0.push(0)
            }
            var concat_text = text_0.concat(text_i)
            text_i = concat_text
            new_dataset.push({
                kelas: kelas_integer,
                teks: text_i
            })
            var teks_view = text_i.map(function(key){ return " "+key; });
            var konten = "Kelas : <b>" + kelas_integer + "</b><br>" + teks_view;
            datasetsequence_table.row.add([konten]).draw();
          }
          if(length==0){
            dataset = new_dataset  
            $('.step-3').show()
            $('.wordsequence_div').hide()
            splitDataset_process()
          }
      },delay)
    });
  }

  function splitDataset_process() {
    messageProcess("Split Dataset")
    process = "splitdataset_div"
    $('.splitdataset_div').show()
    setTimeout(function () {
      let dataset_length = dataset.length
      var splitKFlod = klasifikasi.splitDataset(dataset, N_kflod)
      var kfContent = ''
      for (let kf = 0; kf < splitKFlod.length; kf++) {
        kfContent += '<div class="kfold'+(kf)+'"></div>'
      }
      $('.kfold_splitdataset_div').html(kfContent)
      
      for (let kf = 0; kf < splitKFlod.length; kf++) {

        setTimeout(()=>{
          const element = splitKFlod[kf];
          var content = '<div class="card" style="margin-bottom: 10px;">'+
                        '<div class="card-header">'+
                          '<a class="card-link" data-toggle="collapse" href=".collapse-kf'+kf+'">FOLD '+(kf+1)+'</a>'+
                        '</div>'+
                        '<div class="collapse show collapse-kf'+kf+'" data-parent="#accordion">'+
                          '<div class="card-body">'+
                            'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'+
                          '</div>'+
                        '</div>'+
                      '</div>'
                      
          $('.kfold'+(kf)).html(content)
        },3000)
        
      }

      console.log(splitKFlod)
      // data_training = resp_split.data_training
      // data_testing = resp_split.data_testing

      let i = 0
      // dataset.forEach(key => {
      //     setTimeout(function () {
      //       var words_integer = key.teks
      //       var text_view = words_integer.map(function(key){ return " "+key; });
      //       var content = "Kelas : <b>" + key.kelas + "</b><br>" + text_view
      //       var label = "Training"
      //       if(!data_training.includes(i)){
      //         label = "Testing"
      //       }
      //       splitdataset_table.row.add([content, label]).draw();
            
      //       i++
      //       if(i==dataset_length){
      //         $('.step-4').show()
      //         $('.splitdataset_div').hide()
      //         lstmprocess(array_words,word_sequence)
      //       }
      //   }, delay)
      // });
    }, delay)
  }

  function lstmprocess(array_words,word_sequence) {
    messageProcess("LSTM");
    process = "lstm_div";
    $('.lstm_div').show();   
    var prepare_data_training = []
    var prepare_kelas_training = []
    let data_training_length = data_training.length
    data_training.forEach(key => {
      setTimeout(()=>{
        data_training_length--
        var data = dataset[key]
        var int_kelas = data.kelas
        var int_training = data.teks

        prepare_data_training.push(int_training)
        prepare_kelas_training.push(int_kelas)
        if(data_training_length==0){
          const data = {
            data_training: prepare_data_training.toString(),
            kelas_training: prepare_kelas_training.toString(),
            kelas: kelas_sequence.toString(),
            token: word_sequence.toString(),
            training_length: dataset_max_length
          }
          $.ajax({
            url: "train-lstm",
            method: "post",
            data: data,
            cache: false,
            success:(resp)=>{
              getSummaryTraining()
            },
            error:()=>{
              message('error','Terputus dengan server, silahkan muat ulang halaman');
            }
          })
        }
      },delay)
    });
  }

  function getSummaryTraining(){
    $.getJSON("/get-summay-training", function(resp){
      setTimeout(()=>{
        if(resp[0]!='done'){
          getSummaryTraining()
          if(resp.length>0){
            let epoch = 0
            var data = []
            train_table.clear()
            resp.forEach(key => {
              epoch++
              data.push([epoch, key.acc, key.val_acc, key.loss, key.val_loss])
              train_table.row.add([epoch, (key.acc).toFixed(3), (key.val_acc).toFixed(3), (key.loss).toFixed(3), (key.val_loss).toFixed(3)]).order([[0,'desc']]).draw();
            });
            google.charts.setOnLoadCallback(renderAccTrainChart(data));
          }
        }else{
          $('.step-5').show()
          $('.lstm_div').hide()
          testingProses()
        }
      },2000)
    });
  }
  
  function downloadModel(){
    window.location = '/model/training-model.zip'
  }

  function renderAccTrainChart(series) {
    var data = new google.visualization.DataTable();
    data.addColumn('number', 'X');
    data.addColumn('number', 'Acc');
    data.addColumn('number', 'Validasi Acc');
    data.addColumn('number', 'Loss');
    data.addColumn('number', 'Validasi Loss');
    data.addRows(series);
    var options = {
      title: 'Kurva Pembelajaran Model',
      height: 400,
      hAxis: {
        title: 'Epoch'
      },
      vAxis: {
        title: 'Value'
      },
    };
    var chart = new google.visualization.LineChart(document.getElementById('acc_chart_div'));
    chart.draw(data, options);
  }

  function testingProses(){
    messageProcess("Pengujian Model");
    process = "testing_div";
    $('.testing_div').show();
    data_testing_length = data_testing.length
    const prepare_data_testing = []
    data_testing.forEach(i => {
      setTimeout(()=>{
        data_testing_length--
        prepare_data_testing.push(dataset[i].teks)
        if(data_testing_length==0){
          const data = {
            data_testing: prepare_data_testing.toString(),
            max_length: dataset_max_length
          }
          $.ajax({
            url: "pengujian-model",
            method: "post",
            data: data,
            cache: false,
            success:(resp)=>{
              let sesuai = 0
              let tidakSesuai = 0
              let x = 0;
              var array_actual = []
              var array_prediksi = []
              data_testing.forEach(i => {
                setTimeout(()=>{
                  var prediksi = resp[x];
                  var isi_laporan = dataset_origin[i].teks;
                  var kelas = preprocessing.caseFolding(dataset_origin[i].kelas);
                  let kelasIndex = prediksi.indexOf(Math.max(...prediksi));
                  var kelas_prediksi = kelas_sequence[kelasIndex]
                  var kelas_actual = kelas_sequence.indexOf(kelas)
                  array_prediksi.push((kelasIndex+1))
                  array_actual.push((kelas_actual+1))
                  if(kelas_prediksi==kelas){
                    sesuai++
                  }else{
                    tidakSesuai++
                  }
                  testing_table.row.add([i,isi_laporan,kelas,kelas_prediksi]).draw();
                  x++

                  if(x==resp.length){
                    console.log([array_actual,array_prediksi])
                    var matrix = convertToMatrix(array_actual,array_prediksi)
                    f1Scrore(matrix)
                    console.log('sesuai = '+sesuai)
                    console.log('TIDAK sesuai = '+tidakSesuai)
                  }
                },delay)
              });
            },
            error:()=>{
              message('error','Terputus dengan server, silahkan muat ulang halaman');
            }
          })
        }
      },delay);
    });
  }

  function f1Scrore(confusionMatrix){
    messageProcess("Kalkulasi f-Measure");
    showTab(".tab-confusion-matrix")

    var matrix = confusionMatrix[0]
    var labels = confusionMatrix[1]
		Matrix({
			container : '#conMatrix',
			data      : matrix,
			labels    : labels,
            start_color : '#ffffff',
            end_color : '#05bcf3'
		});

    var tp = [];
    var fp = [];
    var fn = [];
    for (let x = 0; x < matrix.length; x++) {
        const row = matrix;
        let fpSum = 0
        let fnSum = 0
        for (let y = 0; y < row[x].length; y++) {
            if(x==y){
                tp.push(row[x][y])
            }else{
                fnSum +=row[x][y]
                fpSum += row[y][x]
            }
        }
        fp.push(fpSum)
        fn.push(fnSum)
    }





  }

  function visualMatrix(matrix){
    
  }

  function convertToMatrix(actual, predicted, options = {}) {
    let distinctLabels;
    distinctLabels = new Set([...actual, ...predicted]);
    distinctLabels = Array.from(distinctLabels);
    distinctLabels.sort();

    // Create confusion matrix and fill with 0's
    const matrix = Array.from({ length: distinctLabels.length });
    for (let i = 0; i < matrix.length; i++) {
      matrix[i] = new Array(matrix.length);
      matrix[i].fill(0);
    }

    for (let i = 0; i < predicted.length; i++) {
      const actualIdx = distinctLabels.indexOf(actual[i]);
      const predictedIdx = distinctLabels.indexOf(predicted[i]);
      if (actualIdx >= 0 && predictedIdx >= 0) {
        matrix[actualIdx][predictedIdx]++;
      }
    }

    return [matrix, distinctLabels];
  }
  
</script>


@endsection